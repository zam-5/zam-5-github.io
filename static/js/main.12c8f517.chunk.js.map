{"version":3,"sources":["components/EqInput.js","components/NewEqButton.js","components/DelEqButton.js","components/EqTable.js","util.js","components/PlotArea.js","components/AxisSelector.js","App.js","reportWebVitals.js","index.js"],"names":["EqInput","props","className","style","whiteSpace","type","id","value","eqText","onChange","e","handleEqChange","target","replace","NewEqButton","onClick","preventDefault","addEqRow","disabled","DelEqButton","name","deleteEqRow","EqTable","eqList","eq","push","eqValidity","eqValiity","stringToDataPoints","expr","xMin","xMax","parsedExpr","Parser","require","operators","concatenate","conditional","logical","comparison","in","assignment","parse","dataArray","xx","x","y","evaluate","getWindowDimensions","window","width","innerWidth","height","innerHeight","PlotArea","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","lines","data","err","stroke","parent","border","padding","top","bottom","left","right","domain","theme","VictoryTheme","material","typ","AxisSelector","label","slice","toLowerCase","htmlFor","axisValue","step","handleAxisChange","Number","App","eq0","setEqText","yMin","yMax","axisValues","setAxisValues","setEqValidity","newEq","eqName","prevState","Error","testEqString","axis","newVal","axisList","map","axisName","eqCount","console","log","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12c8f517.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function EqInput(props) {\n    function handleEqChange(e) {\n        const filter = /[^0-9a-xEPI+*^/().-]/g;\n\n        props.handleEqChange(e.target.value.replace(filter, ''), props.id);\n    }\n\n    return (\n        <label className=\"eqBox\">\n            <span style={{ whiteSpace: 'nowrap' }}>\n                f(x)=&nbsp;\n                <input\n                    type=\"text\"\n                    id={props.id + 'Input'}\n                    value={props.eqText}\n                    onChange={handleEqChange}\n                    className={props.className}\n                />\n            </span>\n        </label>\n    );\n}\n","import React from 'react';\n\nexport default function NewEqButton(props) {\n    function handleClick(e) {\n        e.preventDefault();\n        props.addEqRow();\n    }\n    return (\n        <button\n            type=\"button\"\n            id=\"addButton\"\n            onClick={handleClick}\n            disabled={false}\n        >\n            +\n        </button>\n    );\n}\n","import React from 'react';\n\nexport default function DelEqButton(props) {\n    return (\n        <button\n            className=\"deleteButton\"\n            type=\"button\"\n            id={props.name + 'delBut'}\n            onClick={(e) => {\n                e.preventDefault();\n                props.deleteEqRow(props.name);\n            }}\n        >\n            X\n        </button>\n    );\n}\n","import React from 'react';\nimport EqInput from './EqInput';\nimport NewEqButton from './NewEqButton';\nimport DelEqButton from './DelEqButton';\n\nexport default function EqTable(props) {\n    let eqList = [];\n    for (let eq in props.eqText) {\n        eqList.push(\n            <tr key={eq} className=\"eqRow\">\n                <td>\n                    <EqInput\n                        eqText={props.eqText[eq]}\n                        handleEqChange={props.handleEqChange}\n                        className={\n                            props.eqValidity[eq] ? 'validInput' : 'invalidInput'\n                        }\n                        eqValiity={props.eqValidity[eq]}\n                        id={eq}\n                    />\n                </td>\n                <td>\n                    <DelEqButton name={eq} deleteEqRow={props.deleteEqRow} />\n                </td>\n            </tr>\n        );\n    }\n\n    return (\n        <div>\n            <table className=\"eqTable\">\n                <tbody>\n                    {eqList}\n                    <tr key=\"addButRow\">\n                        <td>\n                            <NewEqButton addEqRow={props.addEqRow} />\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\n\nexport function stringToDataPoints(expr, xMin, xMax) {\n    const Parser = require('expr-eval').Parser;\n\n    const parser = new Parser({\n        operators: {\n            concatenate: false,\n            conditional: false,\n            logical: false,\n            comparison: false,\n            in: false,\n            assignment: false,\n        },\n    });\n\n    const parsedExpr = parser.parse(expr);\n\n    let dataArray = [];\n\n    for (let xx = xMin; xx < xMax; xx += 0.1) {\n        dataArray.push({ x: xx, y: parsedExpr.evaluate({ x: xx }) });\n    }\n    return dataArray;\n}\n\nexport function testEqString(expr) {\n    try {\n        const Parser = require('expr-eval').Parser;\n\n        const parser = new Parser({\n            operators: {\n                concatenate: false,\n                conditional: false,\n                logical: false,\n                comparison: false,\n                in: false,\n                assignment: false,\n            },\n        });\n\n        let parsedExpr = parser.parse(expr);\n        let calcedVal = parsedExpr.evaluate({ x: 1 });\n        if (typeof calcedVal !== 'number') {\n            throw new Error();\n        }\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height,\n    };\n}\n\nexport function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(\n        getWindowDimensions()\n    );\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n","import React from 'react';\nimport { VictoryChart, VictoryLine, VictoryTheme } from 'victory';\nimport { stringToDataPoints, useWindowDimensions } from '../util';\n\nexport default function PlotArea(props) {\n    const { height, width } = useWindowDimensions();\n\n    let lines = [];\n    for (let eq in props.eqText) {\n        let data = [];\n        try {\n            data = stringToDataPoints(props.eqText[eq], props.xMin, props.xMax);\n        } catch (err) {\n            data = [{ x: 0, y: 0 }];\n        }\n\n        lines.push(\n            <VictoryLine\n                key={props.eqText[eq] + 'line'}\n                style={{\n                    data: { stroke: '#c43a31' },\n                    parent: { border: '1px solid #ccc' },\n                }}\n                data={data}\n            />\n        );\n    }\n\n    // let data = [];\n    // try {\n    //     data = stringToDataPoints(props.eqText, props.xMin, props.xMax);\n    // } catch (err) {\n    //     data = [{ x: 0, y: 0 }];\n    // }\n\n    //const lines =\n    return (\n        <VictoryChart\n            width={width - 210}\n            height={height - 40}\n            padding={{ top: 10, bottom: 10, left: 10, right: 10 }}\n            domain={props.domain}\n            theme={VictoryTheme.material}\n            typ\n        >\n            {lines}\n        </VictoryChart>\n    );\n}\n","import React from 'react';\n\nexport default function AxisSelector(props) {\n    function handleAxisChange(e) {\n        const filter = /[^0-9-]/g;\n        props.handleAxisChange(\n            props.name,\n            Number(e.target.value.replace(filter, ''))\n        );\n    }\n\n    const name = props.name;\n    const label = `${name[0]}-${name.slice(1).toLowerCase()}: `;\n    return (\n        <div className=\"axisInputDiv\">\n            <label htmlFor={name} className=\"axisInput\">\n                {label}\n                <input\n                    type=\"number\"\n                    name={name}\n                    id={name}\n                    value={props.axisValue}\n                    step=\"1\"\n                    onChange={handleAxisChange}\n                />\n            </label>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport EqTable from './components/EqTable';\nimport PlotArea from './components/PlotArea';\nimport AxisSelector from './components/AxisSelector';\nimport { testEqString } from './util';\n\nexport default function App(props) {\n    const [eqText, setEqText] = useState({ eq0: '' });\n\n    const [axisValues, setAxisValues] = useState({\n        xMin: -10,\n        xMax: 10,\n        yMin: -10,\n        yMax: 10,\n    });\n    const [eqValidity, setEqValidity] = useState({ eq0: false });\n\n    function handleEqChange(newEq, eqName) {\n        setEqText((prevState) => ({ ...prevState, [eqName]: newEq }));\n        setEqValidity((prevState) => ({\n            ...prevState,\n            [eqName]: testEqString(newEq),\n        }));\n    }\n\n    function addEqRow() {\n        let eqCount = 0;\n        for (let eq in eqText) {\n            console.log({ eq });\n            eqCount++;\n        }\n        handleEqChange('', 'eq' + eqCount);\n    }\n\n    function deleteEqRow(eqName) {\n        console.log('here');\n        setEqText((prevState) => {\n            const state = { ...prevState };\n            delete state[eqName];\n            return state;\n        });\n        setEqValidity((prevState) => {\n            const state = { ...prevState };\n            delete state[eqName];\n            return state;\n        });\n    }\n\n    function handleAxisChange(axis, newVal) {\n        setAxisValues((prevState) => ({ ...prevState, [axis]: newVal }));\n    }\n\n    const axes = ['xMin', 'xMax', 'yMin', 'yMax'];\n    const axisList = axes.map((axisName) => {\n        return (\n            <AxisSelector\n                name={axisName}\n                key={axisName}\n                axisValue={axisValues[axisName]}\n                handleAxisChange={handleAxisChange}\n            />\n        );\n    });\n    return (\n        <div className=\"appDiv\">\n            <div className=\"topBar\">grapher</div>\n            <div className=\"appArea\">\n                <div className=\"sidebar\">\n                    <p>Equations </p>\n                    <EqTable\n                        eqText={eqText}\n                        handleEqChange={handleEqChange}\n                        eqValidity={eqValidity}\n                        addEqRow={addEqRow}\n                        deleteEqRow={deleteEqRow}\n                    />\n                    <hr />\n                    <div className=\"axisControls\">{axisList}</div>\n                </div>\n                <div className=\"PlotArea\">\n                    <PlotArea\n                        domain={{\n                            x: [axisValues.xMin, axisValues.xMax],\n                            y: [axisValues.yMin, axisValues.yMax],\n                        }}\n                        eqText={eqText}\n                        xMin={axisValues.xMin}\n                        xMax={axisValues.xMax}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}